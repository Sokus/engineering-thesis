MULTITHREADING
==============


Keywords:
---------
volatile - informs the compiler that the variable may be modified outside the visible scope


Linux:
------
int pthread_create((pthread_t *)handle, 0, thread_callback, arg);
void *thread_callback(void *arg);

__atomic_signal_fence(__ATOMIC_SEQ_CST)
type __sync_add_and_fetch(type *ptr, type value, ...)
type __sync_val_compare_and_swap (type *ptr, type oldval, type newval, ...)

int sem_init((sem_t *)sem, 0, (unsigned int)initial_value)
int sem_wait((sem_t *)sem)



Windows:
--------
HANDLE CreateThread(0, 0, thread_callback, thread_argument, 0, 0) // create and run a thread
DWORD ThreadProc(LPVOID lpParameter) // thread callback function

void _ReadWriteBarrier(void)
void _WriteBarrier(void)
LONG InterlockedIncrement(LONG volatile *Addend);

HANDLE CreateSemaphoreExA(0,(LONG)initial_count, (LONG)max_count, 0, 0, SEMAPHORE_ALL_ACCESS);
DWORD WaitForSingleObjectEx((HANDLE)handle, INFINITE, false);
BOOL ReleaseSemaphore((HANDLE)semaphore, (LONG)release_count, (LPLONG)out_previous_count);


Sources:
--------
https://docs.microsoft.com/en-us/windows/win32/api/
